{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","useState","value","setValue","todos","setTodos","addTodo","text","newTodos","complete","onSubmit","e","preventDefault","type","onChange","target","required","disabled","length","map","el","index","Fragment","style","textDecoration","updatedTodos","JSON","parse","stringify","editTodoHandler","onClick","completeTodoHandler","splice","deleteTodoHandler","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uOAyFeA,MA/Ef,WAAgB,IAAD,EACaC,mBAAiB,IAD9B,mBACNC,EADM,KACCC,EADD,OAEaF,mBAAkB,IAF/B,mBAENG,EAFM,KAECC,EAFD,KAUPC,EAAU,SAACC,GACf,IAAMC,EAAiB,sBAAOJ,GAAP,CAAc,CAAEG,OAAME,UAAU,KACvDJ,EAASG,IAqBX,OACE,qCACE,4CACA,uBAAME,SAhCW,SAACC,GACpBA,EAAEC,iBACFN,EAAQJ,GACRC,EAAS,KA6BP,UACE,uBACEU,KAAK,OACLX,MAAOA,EACPY,SAAU,SAACH,GAAD,OAAOR,EAASQ,EAAEI,OAAOb,QACnCc,UAAQ,IAEV,wBAAQH,KAAK,SAASI,SAA2B,IAAjBf,EAAMgB,SAAgB,EAAtD,yBAKF,kCACoB,IAAjBd,EAAMc,OACL,yDAEAd,EAAMe,KAAI,SAACC,EAAWC,GAAZ,OACR,cAAC,IAAMC,SAAP,UACE,8BACE,uBACEL,SAAUG,EAAGX,WAAY,EACzBc,MAAO,CACLC,eAAgBJ,EAAGX,SAAW,eAAiB,IAEjDP,MAAOkB,EAAGb,KACVO,SAAU,SAACH,GAAD,OAlCF,SAACJ,EAAcc,GACrC,IAAMI,EAAwBC,KAAKC,MAAMD,KAAKE,UAAUxB,IACxDqB,EAAaJ,GAAOd,KAAOA,EAC3BF,EAASoB,GA+BsBI,CAAgBlB,EAAEI,OAAOb,MAAOmB,MAGnD,wBAAQS,QAAS,kBA3CH,SAACT,GAC3B,IAAMb,EAAiB,YAAOJ,GAC9BI,EAASa,GAAOZ,UAAYD,EAASa,GAAOZ,SAC5CJ,EAASG,GAwC0BuB,CAAoBV,IAA3C,SACGD,EAAGX,SAAW,aAAe,aAEhC,wBAAQqB,QAAS,kBApDL,SAACT,GACzB,IAAMb,EAAiB,YAAOJ,GAC9BI,EAASwB,OAAOX,EAAO,GACvBhB,EAASG,GAiD0ByB,CAAkBZ,IAAzC,6BAdiBA,YCjDlBa,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.33b66078.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\n\ntype FormElem = React.FormEvent<HTMLFormElement>;\n\ninterface ITodo {\n  text: string;\n  complete: boolean;\n}\n\nfunction App() {\n  const [value, setValue] = useState<string>('');\n  const [todos, setTodos] = useState<ITodo[]>([]);\n\n  const handleSubmit = (e: FormElem): void => {\n    e.preventDefault();\n    addTodo(value);\n    setValue('');\n  };\n\n  const addTodo = (text: string): void => {\n    const newTodos: ITodo[] = [...todos, { text, complete: false }];\n    setTodos(newTodos);\n  };\n\n  const deleteTodoHandler = (index: number): void => {\n    const newTodos: ITodo[] = [...todos];\n    newTodos.splice(index, 1);\n    setTodos(newTodos);\n  };\n\n  const completeTodoHandler = (index: number): void => {\n    const newTodos: ITodo[] = [...todos];\n    newTodos[index].complete = !newTodos[index].complete;\n    setTodos(newTodos);\n  };\n\n  const editTodoHandler = (text: string, index: number): void => {\n    const updatedTodos: ITodo[] = JSON.parse(JSON.stringify(todos));\n    updatedTodos[index].text = text;\n    setTodos(updatedTodos);\n  };\n\n  return (\n    <>\n      <h1>Todo List:</h1>\n      <form onSubmit={handleSubmit}>\n        <input\n          type='text'\n          value={value}\n          onChange={(e) => setValue(e.target.value)}\n          required\n        />\n        <button type='submit' disabled={value.length === 0 && true}>\n          Add Todo\n        </button>\n      </form>\n\n      <section>\n        {todos.length === 0 ? (\n          <p>Go on, Write some todos.</p>\n        ) : (\n          todos.map((el: ITodo, index: number) => (\n            <React.Fragment key={index}>\n              <p>\n                <input\n                  disabled={el.complete && true}\n                  style={{\n                    textDecoration: el.complete ? 'line-through' : '',\n                  }}\n                  value={el.text}\n                  onChange={(e) => editTodoHandler(e.target.value, index)}\n                />\n\n                <button onClick={() => completeTodoHandler(index)}>\n                  {el.complete ? 'Incomplete' : 'Complete'}\n                </button>\n                <button onClick={() => deleteTodoHandler(index)}>\n                  Delete Todo\n                </button>\n              </p>\n            </React.Fragment>\n          ))\n        )}\n      </section>\n    </>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}